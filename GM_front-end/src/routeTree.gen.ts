/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as AuthImport } from './routes/_auth'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const ProtectedDashboardLazyImport = createFileRoute('/_protected/dashboard')()
const AuthSignupLazyImport = createFileRoute('/_auth/signup')()
const AuthHomeLazyImport = createFileRoute('/_auth/home')()

// Create/Update Routes

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ProtectedDashboardLazyRoute = ProtectedDashboardLazyImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => ProtectedRoute,
} as any).lazy(() =>
  import('./routes/_protected/dashboard.lazy').then((d) => d.Route),
)

const AuthSignupLazyRoute = AuthSignupLazyImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/_auth/signup.lazy').then((d) => d.Route))

const AuthHomeLazyRoute = AuthHomeLazyImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/_auth/home.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/_auth/home': {
      id: '/_auth/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof AuthHomeLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/signup': {
      id: '/_auth/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof AuthSignupLazyImport
      parentRoute: typeof AuthImport
    }
    '/_protected/dashboard': {
      id: '/_protected/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardLazyImport
      parentRoute: typeof ProtectedImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthHomeLazyRoute: typeof AuthHomeLazyRoute
  AuthSignupLazyRoute: typeof AuthSignupLazyRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthHomeLazyRoute: AuthHomeLazyRoute,
  AuthSignupLazyRoute: AuthSignupLazyRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface ProtectedRouteChildren {
  ProtectedDashboardLazyRoute: typeof ProtectedDashboardLazyRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedDashboardLazyRoute: ProtectedDashboardLazyRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '': typeof ProtectedRouteWithChildren
  '/home': typeof AuthHomeLazyRoute
  '/signup': typeof AuthSignupLazyRoute
  '/dashboard': typeof ProtectedDashboardLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '': typeof ProtectedRouteWithChildren
  '/home': typeof AuthHomeLazyRoute
  '/signup': typeof AuthSignupLazyRoute
  '/dashboard': typeof ProtectedDashboardLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_protected': typeof ProtectedRouteWithChildren
  '/_auth/home': typeof AuthHomeLazyRoute
  '/_auth/signup': typeof AuthSignupLazyRoute
  '/_protected/dashboard': typeof ProtectedDashboardLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/home' | '/signup' | '/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/home' | '/signup' | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_protected'
    | '/_auth/home'
    | '/_auth/signup'
    | '/_protected/dashboard'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AuthRoute: typeof AuthRouteWithChildren
  ProtectedRoute: typeof ProtectedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AuthRoute: AuthRouteWithChildren,
  ProtectedRoute: ProtectedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/_protected"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/home",
        "/_auth/signup"
      ]
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/dashboard"
      ]
    },
    "/_auth/home": {
      "filePath": "_auth/home.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/signup": {
      "filePath": "_auth/signup.lazy.tsx",
      "parent": "/_auth"
    },
    "/_protected/dashboard": {
      "filePath": "_protected/dashboard.lazy.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
